<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reference on Duende IdentityServer Documentation</title>
    <link>http://localhost:1313/identityserver/v7/configuration/dcr/reference/</link>
    <description>Recent content in Reference on Duende IdentityServer Documentation</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/identityserver/v7/configuration/dcr/reference/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Validation</title>
      <link>http://localhost:1313/identityserver/v7/configuration/dcr/reference/validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/identityserver/v7/configuration/dcr/reference/validation/</guid>
      <description>IDynamicClientRegistrationValidator The IDynamicClientRegistrationValidator is the contract for the service that validates a dynamic client registration request. It contains a single ValidateAsync(&amp;hellip;) method.&#xA;Conceptually, the validation step is responsible for checking the validity of the metadata supplied in the registration request, and using that metadata to set properties of a Client model. In contrast, the IDynamicClientRegistrationRequestProcessor is responsible for setting properties on the Client model that are generated by the Configuration API itself.</description>
    </item>
    <item>
      <title>Request Processing</title>
      <link>http://localhost:1313/identityserver/v7/configuration/dcr/reference/processing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/identityserver/v7/configuration/dcr/reference/processing/</guid>
      <description>IDynamicClientRegistrationRequestProcessor The IDynamicClientRegistrationValidator is the contract for the service that processes a dynamic client registration request. It contains a single ProcessAsync(&amp;hellip;) method.&#xA;Conceptually, the request processing step is responsible for setting properties on the Client model that are generated by the Configuration API itself. In contrast, the IDynamicClientRegistrationRequestProcessor is responsible for checking the validity of the metadata supplied in the registration request, and using that metadata to set properties of a Client model.</description>
    </item>
    <item>
      <title>Store</title>
      <link>http://localhost:1313/identityserver/v7/configuration/dcr/reference/store/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/identityserver/v7/configuration/dcr/reference/store/</guid>
      <description>IClientConfigurationStore The IClientConfigurationStore interface defines the contract for a service that communication with the client configuration data store. It contains a single AddAsync method.&#xA;public interface IClientConfigurationStore Members name description AddAsync(…) Adds a client to the configuration store. ClientConfigurationStore The ClientConfigurationStore is the default implementation of the IClientConfigurationStore. It uses Entity Framework to communicate with the client configuration store, and is intended to be used when IdentityServer is configured to use the Entity Framework based configuration stores.</description>
    </item>
    <item>
      <title>Response Generation</title>
      <link>http://localhost:1313/identityserver/v7/configuration/dcr/reference/response/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/identityserver/v7/configuration/dcr/reference/response/</guid>
      <description>IDynamicClientRegistrationResponseGenerator The IDynamicClientRegistrationResponseGenerator interface defines the contract for a service that generates dynamic client registration responses.&#xA;public interface IDynamicClientRegistrationResponseGenerator Members name description WriteBadRequestError(…) Writes a bad request error to the HTTP context. WriteContentTypeError(…) Writes a content type error to the HTTP response. WriteProcessingError(…) Writes a processing error to the HTTP context. WriteResponse(…) Writes a response object to the HTTP context with the given status code. WriteSuccessResponse(…) Writes a success response to the HTTP context.</description>
    </item>
    <item>
      <title>Models</title>
      <link>http://localhost:1313/identityserver/v7/configuration/dcr/reference/models/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/identityserver/v7/configuration/dcr/reference/models/</guid>
      <description>DynamicClientRegistrationRequest Represents a dynamic client registration request. The parameters that are supported include a subset of the parameters defined by IANA, and custom properties needed by IdentityServer.&#xA;public class DynamicClientRegistrationRequest Public Members name description AbsoluteRefreshTokenLifetime { get; set; } The absolute lifetime of refresh tokens, in seconds. This property is an extension to the Dynamic Client Registration Protocol. AccessTokenLifetime { get; set; } The lifetime of access tokens, in seconds. This property is an extension to the Dynamic Client Registration Protocol.</description>
    </item>
    <item>
      <title>Options</title>
      <link>http://localhost:1313/identityserver/v7/configuration/dcr/reference/options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/identityserver/v7/configuration/dcr/reference/options/</guid>
      <description>IdentityServerConfigurationOptions Top level options for IdentityServer.Configuration.&#xA;public class IdentityServerConfigurationOptions Public Members name description DynamicClientRegistration { get; set; } Options for Dynamic Client Registration DynamicClientRegistrationOptions Options for dynamic client registration.&#xA;public class DynamicClientRegistrationOptions Public Members name description SecretLifetime { get; set; } Gets or sets the lifetime of secrets generated for clients. If unset, generated secrets will have no expiration. Defaults to null (secrets never expire). </description>
    </item>
  </channel>
</rss>
