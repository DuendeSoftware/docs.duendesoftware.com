<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dynamic Client Registration on Duende IdentityServer Documentation</title>
    <link>http://localhost:1313/identityserver/v7/configuration/dcr/</link>
    <description>Recent content in Dynamic Client Registration on Duende IdentityServer Documentation</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/identityserver/v7/configuration/dcr/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installation and Hosting</title>
      <link>http://localhost:1313/identityserver/v7/configuration/dcr/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/identityserver/v7/configuration/dcr/installation/</guid>
      <description>The Configuration API can be installed in a separate host from IdentityServer, or in the same host. In many cases it is desirable to host the configuration API and IdentityServer separately. This facilitates the ability to restrict access to the configuration API at the network level separately from IdentityServer and keeps IdentityServer&amp;rsquo;s access to the configuration data read-only. In other cases, you may find that hosting the two systems together better fits your needs.</description>
    </item>
    <item>
      <title>Authorization</title>
      <link>http://localhost:1313/identityserver/v7/configuration/dcr/authorization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/identityserver/v7/configuration/dcr/authorization/</guid>
      <description>You should consider your requirements and design authentication and authorization policy for the Configuration API, if required. The specifications that define DCR envision both open registration, where authentication and authorization are absent and all client software can register with the authorization server, and protected registration, where an initial access token is required in order to register.&#xA;The Configuration API creates standard ASP.NET endpoints that can be protected through traditional ASP.NET authorization.</description>
    </item>
    <item>
      <title>Calling the Registration Endpoint</title>
      <link>http://localhost:1313/identityserver/v7/configuration/dcr/calling-registration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/identityserver/v7/configuration/dcr/calling-registration/</guid>
      <description>The registration endpoint is invoked by making an HTTP POST request to the /connect/dcr endpoint with a json payload containing metadata describing the desired client as described in RFC 7591 and OpenID Connect Dynamic Client Registration 1.0.&#xA;The supported metadata properties are listed in the reference section on the DynamicClientRegistrationRequest model. A mixture of standardized and IdentityServer-specific properties are supported. Most standardized properties that are applicable to the client credentials or code flow grants (the two grants we support) are supported.</description>
    </item>
    <item>
      <title>Customization</title>
      <link>http://localhost:1313/identityserver/v7/configuration/dcr/customization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/identityserver/v7/configuration/dcr/customization/</guid>
      <description>The behavior of the Configuration API can be customized through the use of several extension points that control the steps that occur when a dynamic client registration request arrives.&#xA;First, the incoming request is validated to ensure that it is syntactically valid and semantically correct. The result of the validation process is a model which will either contain error details or a validated Client model.&#xA;When validation succeeds, the validated request is passed on to the request processor.</description>
    </item>
  </channel>
</rss>
