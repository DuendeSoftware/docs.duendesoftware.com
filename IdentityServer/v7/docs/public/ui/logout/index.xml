<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Logout on Duende IdentityServer Documentation</title>
    <link>http://localhost:1313/identityserver/v7/ui/logout/</link>
    <description>Recent content in Logout on Duende IdentityServer Documentation</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/identityserver/v7/ui/logout/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Logout Context</title>
      <link>http://localhost:1313/identityserver/v7/ui/logout/logout_context/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/identityserver/v7/ui/logout/logout_context/</guid>
      <description>To correctly perform all the steps for logout, your logout page needs contextual information about the user&amp;rsquo;s session and the client that initiated logout request. This information is provided by the LogoutRequest class and will provide your logout page data needed for the logout workflow.&#xA;Accessing the LogoutRequest and the logoutId The logout page can be triggered in different ways:&#xA;Client Initiated Logout (protocol) External Provider Logout Notification (protocol) Direct User Access (non-protocol) If the logout page is being triggered by a protocol workflow, then this means Duende IdentityServer has redirected the user&amp;rsquo;s browser to the logout page.</description>
    </item>
    <item>
      <title>Ending the Session</title>
      <link>http://localhost:1313/identityserver/v7/ui/logout/session_cleanup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/identityserver/v7/ui/logout/session_cleanup/</guid>
      <description>Removing the Authentication Cookie To remove the authentication cookie, simply use the ASP.NET Core SignOutAsync extension method on the HttpContext. You will need to pass the scheme used (which is provided by IdentityServerConstants.DefaultCookieAuthenticationScheme unless you have changed it):&#xA;await HttpContext.SignOutAsync(IdentityServerConstants.DefaultCookieAuthenticationScheme); Or you can use the overload that will simply sign-out of the default authentication scheme:&#xA;await HttpContext.SignOutAsync(); If you are integrating with ASP.NET Identity, sign out using its SignInManager instead:</description>
    </item>
    <item>
      <title>Client Notifications</title>
      <link>http://localhost:1313/identityserver/v7/ui/logout/notification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/identityserver/v7/ui/logout/notification/</guid>
      <description>Notifying clients that the user has signed-out As part of the logout process you will want to ensure client applications are informed that the user has signed out.&#xA;This is done by sending a notification to an endpoint provided by the each client application. Depending on your architecture, there are three supported techniques to call these endpoints:&#xA;front-channel notifications via the browser back-channel notifications via server-side call a PostMessage-based notification for JavaScript clients Regardless which technique you are using, Duende IdentityServer keeps track of the client applications involved with the current user session and provides helpers and automated ways of invoking the notification mechanisms.</description>
    </item>
    <item>
      <title>Returning to the Client</title>
      <link>http://localhost:1313/identityserver/v7/ui/logout/client_redirect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/identityserver/v7/ui/logout/client_redirect/</guid>
      <description>If sign-out was initiated by a client application, then the client first redirected the user to the end session endpoint. This can be determined if a logoutId is passed to the login page and the returned LogoutRequest&amp;rsquo;s PostLogoutRedirectUri is set.&#xA;How to Redirect If there is a PostLogoutRedirectUri value, then it&amp;rsquo;s important how this URL is used to redirect the user. The logout page typically should not directly redirect the user to this URL.</description>
    </item>
    <item>
      <title>External Logout</title>
      <link>http://localhost:1313/identityserver/v7/ui/logout/external/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/identityserver/v7/ui/logout/external/</guid>
      <description>When a user is logging out, and they have used an external identity provider to sign-in then it is likely that they should be redirected to also sign-out of the external provider. Not all external providers support sign-out, as it depends on the protocol and features they support.&#xA;Don&amp;rsquo;t forget that your logout page still needs to complete all the other steps to properly sign the user out. This is complicated if the logout page must redirect to an external provider to sign out.</description>
    </item>
    <item>
      <title>External Logout Notification</title>
      <link>http://localhost:1313/identityserver/v7/ui/logout/external_notification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/identityserver/v7/ui/logout/external_notification/</guid>
      <description>Federated sign-out is the situation where a user has used an external identity provider to log into IdentityServer, and then the user logs out of that external identity provider via a workflow unknown to IdentityServer. When the user signs out, it will be useful for IdentityServer to be notified so that it can sign the user out of IdentityServer and all of the applications that use IdentityServer.&#xA;Not all external identity providers support federated sign-out, but those that do will provide a mechanism to notify clients that the user has signed out.</description>
    </item>
  </channel>
</rss>
